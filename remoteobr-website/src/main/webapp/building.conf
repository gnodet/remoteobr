The way most developers get started contributing to a project.

h1. Building with Maven

${project.name} uses [Maven|http://maven.apache.org/] as its primary build tool for performing releases and uses the pom.xml to describe dependencies between modules. 

h2. Prequisites

*Required:*
* Download and [install Maven|http://maven.apache.org/download.html]
* Get the latest [Source|source]
* Java 1.5

h2. Maven options

To build ${project.name} maven has to be configured to use more memory

{code}
    set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=128m
{code}

h2. A normal build

{code}
    mvn install -Pdownload
{code}

The last argument, {{-Pdownload}}, is optional and typically only used on the first build as it adds some extra repos to the project just in case our dependencies have not quite reached the central Maven repository yet.

h2. Doing a Quick Build

The following avoids running all the unit test cases, we just skip the test running phase and not the building part

{code}
    mvn -Dtest=false clean install
{code}

h2. Using an IDE

If you prefer to use an IDE then you can auto-generate the IDE's project files using maven plugins. e.g.

{code}
    mvn eclipse:eclipse
{code}
or
{code}
    mvn idea:idea
{code}

h2. Importing into Eclipse

If you have not already done so, you will need to make Eclipse aware of the Maven repository so that it can build everything. In the preferences, go to {{Java -> Build Path -> Classpath}} and define a new Classpath Variable named {{M2_REPO}} that points to your local Maven repository. i.e. {{~/.m2/repository}} on Unix and {{c:\Documents and Settings\$username\.m2\repository}} on Windows).

You can also get Maven to do this for you:
{code}
    mvn eclipse:add-maven-repo -Declipse.workspace=/path/to/the/workspace/ 
{code}

h2. See Also

* [Source|source]
* [Developer Links|developers]
